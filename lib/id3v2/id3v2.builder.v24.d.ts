/// <reference types="node" />
import { IID3V2 } from './id3v2.types';
import { ID3V2RawBuilder } from './id3v2.builder';
export declare class ID3V24TagBuilder implements IID3V2.Builder {
    static encodings: {
        iso88591: string;
        ucs2: string;
        utf16be: string;
        utf8: string;
    };
    rawBuilder: ID3V2RawBuilder;
    constructor(encoding?: string);
    buildFrames(): Array<IID3V2.Frame>;
    version(): number;
    rev(): number;
    buildTag(): IID3V2.Tag;
    acoustidFingerprint(value?: string): ID3V24TagBuilder;
    acoustidID(value?: string): ID3V24TagBuilder;
    album(value?: string): ID3V24TagBuilder;
    albumSort(value?: string): ID3V24TagBuilder;
    albumArtist(value?: string): ID3V24TagBuilder;
    albumArtistSort(value?: string): ID3V24TagBuilder;
    artist(value?: string): this;
    artistSort(value?: string): ID3V24TagBuilder;
    artists(value?: string): ID3V24TagBuilder;
    asin(value?: string): ID3V24TagBuilder;
    audioEncryption(id: string, previewStart: number, previewLength: number, bin: Buffer): this;
    barcode(value?: string): ID3V24TagBuilder;
    bpm(value?: string | number): ID3V24TagBuilder;
    catalogNumber(value?: string): ID3V24TagBuilder;
    chapter(id: string, start: number, end: number, offset: number, offsetEnd: number, subframes?: Array<IID3V2.Frame>): ID3V24TagBuilder;
    chapterTOC(value: string, id: string, ordered: boolean, topLevel: boolean, children: Array<string>): ID3V24TagBuilder;
    comment(id: string, value?: string): ID3V24TagBuilder;
    commercialInformationURL(value?: string): ID3V24TagBuilder;
    composer(value?: string): ID3V24TagBuilder;
    composerSort(value?: string): ID3V24TagBuilder;
    conductor(value?: string): ID3V24TagBuilder;
    copyright(value?: string): ID3V24TagBuilder;
    copyrightURL(value?: string): ID3V24TagBuilder;
    custom(id: string, value?: string): ID3V24TagBuilder;
    date(value?: string): ID3V24TagBuilder;
    disc(discNr?: string | number, discTotal?: string | number): ID3V24TagBuilder;
    discSubtitle(value?: string): ID3V24TagBuilder;
    encoder(value?: string): ID3V24TagBuilder;
    encoderSettings(value?: string): ID3V24TagBuilder;
    encodingDate(value?: string): ID3V24TagBuilder;
    eventTimingCodes(timeStampFormat: number, events: Array<{
        type: number;
        timestamp: number;
    }>): ID3V24TagBuilder;
    fileOwner(value?: string): ID3V24TagBuilder;
    fileType(value?: string): ID3V24TagBuilder;
    genre(value?: string): ID3V24TagBuilder;
    grouping(value?: string): ID3V24TagBuilder;
    initialKey(value?: string): ID3V24TagBuilder;
    internetRadioStation(value?: string): ID3V24TagBuilder;
    internetRadioStationOwner(value?: string): ID3V24TagBuilder;
    involved(group: string, value?: string): ID3V24TagBuilder;
    isCompilation(value?: boolean | number | string): ID3V24TagBuilder;
    isPodcast(value?: boolean | number | string): ID3V24TagBuilder;
    isrc(value?: string): ID3V24TagBuilder;
    label(value?: string): ID3V24TagBuilder;
    labelURL(value?: string): ID3V24TagBuilder;
    language(value?: string): ID3V24TagBuilder;
    license(value?: string): ID3V24TagBuilder;
    linkedInformation(id: string, url: string, additional: Array<string>): this;
    lyricist(value?: string): ID3V24TagBuilder;
    lyrics(value?: string, language?: string, id?: string): ID3V24TagBuilder;
    mbAlbumArtistID(value?: string): ID3V24TagBuilder;
    mbAlbumID(value?: string): ID3V24TagBuilder;
    mbAlbumReleaseCountry(value?: string): ID3V24TagBuilder;
    mbAlbumStatus(value?: string): ID3V24TagBuilder;
    mbAlbumType(value?: string): ID3V24TagBuilder;
    mbArtistID(value?: string): ID3V24TagBuilder;
    mbDiscID(value?: string): ID3V24TagBuilder;
    mbOriginalAlbumID(value?: string): ID3V24TagBuilder;
    mbOriginalArtistID(value?: string): ID3V24TagBuilder;
    mbReleaseGroupID(value?: string): ID3V24TagBuilder;
    mbReleaseTrackID(value?: string): ID3V24TagBuilder;
    mbTrackDisambiguation(value?: string): ID3V24TagBuilder;
    mbTrackID(value?: string): ID3V24TagBuilder;
    mbTRMID(value?: string): ID3V24TagBuilder;
    mbWorkID(value?: string): ID3V24TagBuilder;
    mediaType(value?: string): ID3V24TagBuilder;
    mood(value?: string): ID3V24TagBuilder;
    movement(value?: string): ID3V24TagBuilder;
    movementNr(nr?: string | number, total?: string | number): ID3V24TagBuilder;
    musicianCredit(group: string, value?: string): ID3V24TagBuilder;
    musicIPPUID(value?: string): ID3V24TagBuilder;
    object(filename: string, mimeType: string, contentDescription: string, bin: Buffer): ID3V24TagBuilder;
    officialArtistURL(value?: string): ID3V24TagBuilder;
    officialAudioFileURL(value?: string): ID3V24TagBuilder;
    officialAudioSourceURL(value?: string): ID3V24TagBuilder;
    officialInternetRadioStationURL(value?: string): ID3V24TagBuilder;
    originalAlbum(value?: string): ID3V24TagBuilder;
    originalArtist(value?: string): ID3V24TagBuilder;
    originalDate(value?: string): ID3V24TagBuilder;
    originalFilename(value?: string): ID3V24TagBuilder;
    originalLyricist(value?: string): ID3V24TagBuilder;
    paymentURL(value?: string): ID3V24TagBuilder;
    picture(pictureType: number, description: string, mimeType: string, binary: Buffer): ID3V24TagBuilder;
    playCount(value?: number): ID3V24TagBuilder;
    playlistDelay(value?: string): ID3V24TagBuilder;
    podcastDescription(value?: string): ID3V24TagBuilder;
    podcastFeedURL(value?: string): ID3V24TagBuilder;
    podcastKeywords(value?: string): ID3V24TagBuilder;
    podcastURL(value?: string): ID3V24TagBuilder;
    popularimeter(email: string, rating: number, count: number): ID3V24TagBuilder;
    priv(id: string, binary: Buffer): ID3V24TagBuilder;
    productionNotice(value?: string): ID3V24TagBuilder;
    relativeVolumeAdjustment(key: string, right: number, left: number, peakRight?: number, peakLeft?: number, rightBack?: number, leftBack?: number, peakRightBack?: number, peakLeftBack?: number, center?: number, peakCenter?: number, bass?: number, peakBass?: number): ID3V24TagBuilder;
    relativeVolumeAdjustment2(id: string, channels: Array<{
        type: number;
        adjustment: number;
        peak?: number;
    }>): ID3V24TagBuilder;
    releaseDate(value?: string): ID3V24TagBuilder;
    remixer(value?: string): ID3V24TagBuilder;
    replayGainAdjustment(peak: number, radioAdjustment: number, audiophileAdjustment: number): ID3V24TagBuilder;
    script(value?: string): ID3V24TagBuilder;
    subtitle(value?: string): ID3V24TagBuilder;
    synchronisedLyrics(id: string, language: string, timestampFormat: number, contentType: number, events: Array<{
        timestamp: number;
        text: string;
    }>): ID3V24TagBuilder;
    taggingDate(value?: string): ID3V24TagBuilder;
    termsOfUse(id: string, language: string, text: string): ID3V24TagBuilder;
    title(value?: string): ID3V24TagBuilder;
    titleSort(value?: string): ID3V24TagBuilder;
    track(trackNr?: string | number, trackTotal?: string | number): ID3V24TagBuilder;
    trackLength(value?: number | string): ID3V24TagBuilder;
    uniqueFileID(id: string, value?: string): ID3V24TagBuilder;
    unknown(key: string, binary: Buffer): ID3V24TagBuilder;
    url(id: string, value?: string): ID3V24TagBuilder;
    website(value?: string): ID3V24TagBuilder;
    writer(value?: string): ID3V24TagBuilder;
    work(value?: string): ID3V24TagBuilder;
}
