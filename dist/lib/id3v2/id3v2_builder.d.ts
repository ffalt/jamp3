import { IID3V2 } from './id3v2__types';
export interface ID3V2Frames {
    [key: string]: Array<IID3V2.FrameValue.Base>;
}
export declare class ID3V2RawBuilder {
    private frameValues;
    build(): ID3V2Frames;
    text(key: string, value: string | undefined): void;
    idText(key: string, id: string, value: string | undefined): void;
    nrAndTotal(key: string, value: number | string | undefined, total: number | string | undefined): void;
    keyTextList(key: string, group: string, value?: string): void;
    bool(key: string, bool: boolean): void;
    idLangText(key: string, value: string | undefined, lang: string | undefined, id: string | undefined): void;
    addPicture(key: string, pictureType: number, description: string, mimeType: string, binary: any): void;
}
export declare class ID3V24TagBuilder {
    rawBuilder: ID3V2RawBuilder;
    buildFrames(): Array<IID3V2.Frame>;
    buildTag(): IID3V2.Tag;
    artist(value?: string): this;
    artistSort(value?: string): this;
    albumArtist(value?: string): this;
    albumArtistSort(value?: string): this;
    album(value?: string): this;
    albumSort(value?: string): this;
    originalAlbum(value?: string): this;
    originalArtist(value: string): this;
    originalDate(value: string): this;
    title(value?: string): this;
    work(value?: string): this;
    titleSort(value?: string): this;
    genre(value?: string): this;
    bmp(value?: string | number): this;
    mood(value?: string): this;
    media(value?: string): this;
    language(value?: string): this;
    grouping(value?: string): this;
    date(value?: string): this;
    track(trackNr?: string | number, trackTotal?: string | number): this;
    disc(discNr?: string | number, discTotal?: string | number): this;
    year(year?: number): this;
    artists(value?: string): this;
    isCompilation(value?: boolean | number | string): this;
    originalYear(value?: string): this;
    composer(value?: string): this;
    composerSort(value?: string): this;
    remixer(value?: string): this;
    label(value?: string): this;
    subtitle(value?: string): this;
    discSubtitle(value?: string): this;
    lyricist(value?: string): this;
    lyrics(value?: string, lang?: string, id?: string): this;
    encoder(value?: string): this;
    encoderSettings(value?: string): this;
    key(value?: string): this;
    copyright(value?: string): this;
    isrc(value?: string): this;
    barcode(value?: string): this;
    asin(value?: string): this;
    catalogNumber(value?: string): this;
    script(value?: string): this;
    license(value?: string): this;
    website(value?: string): this;
    movement(value?: string): this;
    movementNr(nr?: string | number, total?: string | number): this;
    writer(value?: string): this;
    custom(id: string, value?: string): this;
    musicianCredit(group: string, value?: string): this;
    involved(group: string, value?: string): this;
    mbAlbumStatus(value?: string): this;
    mbAlbumType(value?: string): this;
    mbAlbumReleaseCountry(value?: string): this;
    mbTrackID(value?: string): this;
    mbReleaseTrackID(value?: string): this;
    mbAlbumID(value?: string): this;
    mbOriginalAlbumID(value?: string): this;
    mbArtistID(value?: string): this;
    mbOriginalArtistID(value?: string): this;
    mbAlbumArtistID(value?: string): this;
    mbReleaseGroupID(value?: string): this;
    mbWorkID(value?: string): this;
    mbTRMID(value?: string): this;
    mbDiscID(value?: string): this;
    acoustidID(value?: string): this;
    acoustidFingerprint(value?: string): this;
    musicIPPUID(value?: string): this;
    comment(id: string, value?: string): this;
    trackLength(value?: number | string): this;
    mbTrackDisambiguation(value?: string): this;
    addPicture(pictureType: number, description: string, mimeType: string, binary: any): this;
}
